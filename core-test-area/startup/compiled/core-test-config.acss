body:init {
	/* Note: window.testsRun gets used in Jasmine to report which tests have been run at the end, so it needs to be outside the Active CSS scope. */
	var: testIndex 0, window.testsRun [];

	/* Delay timings. Keep these here so it can be seen what's going on and adjusted if needed.
		Don't forget to adjust startup/core-test-settings.js if the overall time taken for the tests needs to change. The last number in the list is the guideline.
		Increment the tests by 250ms each time. Don't go less than that, just to be on the safe side.
	*/
	var: window.delayTimes {
		ajax: [1000]
	};

	/* This has to go at the end if stuff goes above it :) */
	render: "<div id=\"content\"></div>";
}

.coreTest:draw {
	var: testIndex++;
	var: window.testsRun[testIndex] {};
	var: window.testsRun[testIndex].desc "{@data-desc}";
	trigger: test;
}

#content:draw {
	render-before-end: "<div id=\"checkCancelTimerAll\" data-desc=\"Basic cancel-timer-all command\" class=\"coreTest\">{|checkCancelTimerAllHTML}</div>";
}

@component checkCancelTimerAllHTML {
	html {
		<div id="cancelTimerAllDiv" style="background-color: blue;"></div>
	}
}

#checkCancelTimerAll:test {

	/* Cancel all by action test. */
	func: checkCancelTimerAllA;
	#cancelTimerAllDiv {
		background-color: green after 1s;
		add-class: .testAddition after 1s;
	}
	cancel-timer-all: true;
	func: checkCancelTimerAllB;

	/* Cancel all by label test. */
	#cancelTimerAllDiv {
		background-color: green after 1s label greenColor;
		add-class: .testAddition after 1s label myAddition;
		func: checkCancelTimerAllC;
	}
	cancel-timer-all: true;
	func: checkCancelTimerAllFinal;

}

#content:draw {
	render-before-end: "<div id=\"checkAddClass\" data-desc=\"Basic add-class command\" class=\"coreTest\"></div>";
}

#checkAddClass:test {
	add-class: .success;
}


#content:draw {
	render-before-end: "<div id=\"checkAjax\" data-desc=\"Basic ajax command\" class=\"coreTest\">{|checkAjaxHTML}</div>";
}

@component checkAjaxHTML {
	&:beforeComponentOpen {
		ajax: "/base/core-test-area/tests/ajax-response-files/get-address-data-1.txt";
	}
	html {
		<h2 id="checkAjaxTestTitle">{{checkAjaxTitle}}</h2>
		<p id="checkAjaxTestAddress">{{checkAjaxAddress}}</p>
	}
}

#checkAjax:test {
	func: checkAjax after {window.delayTimes.ajax[0]}ms;
}

#content:draw {
	render-before-end: "<div id=\"checkAlert\" data-desc=\"Basic alert command\" class=\"coreTest\"></div>";
}

#checkAlert:test {
	alert: "checkAlert";
}


#content:draw {
	render-before-end: "<div id=\"checkBlur\" data-desc=\"Basic blur command\" class=\"coreTest\">{|checkBlurHTML}</div>";
}

@component checkBlurHTML {
	html {
		<input id="blurField" type="text" value="This text field will get focus after one second, and then will blur - or focus-off - two seconds after that.">
	}
}

#checkBlur:test {
	#blurField {
	    focus-on: self;
		func: checkBlurA;
	    blur: true;
	}
	func: checkBlurFinal;
}


#content:draw {
	render-before-end: "<div id=\"checkCancelTimer\" data-desc=\"Basic cancel-timer command\" class=\"coreTest\">{|checkCancelTimerHTML}</div>";
}

@component checkCancelTimerHTML {
	html {
		<div id="cancelTimerDiv" style="background-color: blue;"></div>
	}
}

#checkCancelTimer:test {

	/* Cancel by action test. */
	func: checkCancelTimerA;
	#cancelTimerDiv {
		background-color: green after 1s;
		func: checkCancelTimerB;
		cancel-timer: background-color;
	}

	/* Cancel by label test. */
	#cancelTimerDiv {
		background-color: green after 1s label greenColor;
		func: checkCancelTimerC;
		cancel-timer: greenColor;
	}
	func: checkCancelTimerFinal;

}

#content:draw {
	render-before-end: "<div id=\"checkClickOnFirst\" data-desc=\"Basic click-on-first command\" class=\"coreTest\">{|checkClickOnFirstHTML}</div>";
}

@component checkClickOnFirstHTML {
	html {
		<div id="clickOnFirstDiv">
		    <a data-color="green" href="">Apples</a>
		    <a data-color="orange" href="">Oranges</a>
		    <a data-color="white" href="">Lychee</a>
		    <a data-color="yellow" href="">Bananas</a>
		    <a data-color="purple and green" href="">Grapes</a>
		</div>
		<p id="clickOnFirstP"></p>
	}
}

#clickOnFirstDiv a:click {
	#clickOnFirstP {
		render: "{@data-color}";
	}
}

#checkClickOnFirst:test {
	func: checkClickOnFirstA;
	click-on-first: #clickOnFirstDiv a;
	func: checkClickOnFirstFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkClickOnLast\" data-desc=\"Basic click-on-last command\" class=\"coreTest\">{|checkClickOnLastHTML}</div>";
}

@component checkClickOnLastHTML {
	html {
		<div id="clickOnLastDiv">
		    <a data-color="green" href="">Apples</a>
		    <a data-color="orange" href="">Oranges</a>
		    <a data-color="white" href="">Lychee</a>
		    <a data-color="yellow" href="">Bananas</a>
		    <a data-color="purple and green" href="">Grapes</a>
		</div>
		<p id="clickOnLastP"></p>
	}
}

#clickOnLastDiv a:click {
	#clickOnLastP {
		render: "{@data-color}";
	}
}

#checkClickOnLast:test {
	func: checkClickOnLastA;
	click-on-last: #clickOnLastDiv a;
	func: checkClickOnLastFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkClickOnNextCycle\" data-desc=\"Basic click-on-next-cycle command\" class=\"coreTest\">{|checkClickOnNextCycleHTML}</div>";
}

@component checkClickOnNextCycleHTML {
	html {
		<div id="clickOnNextCycleDiv">
		    <a data-color="green" href="">Apples</a>
		    <a data-color="orange" href="">Oranges</a>
		    <a id="clickOnNextCycleStart" data-color="white" href="">Lychee</a>
		    <a data-color="yellow" href="">Bananas</a>
		    <a data-color="purple and green" href="">Grapes</a>
		</div>
		<p id="clickOnNextCycleP"></p>
	}
}

#clickOnNextCycleDiv a:click {
	#clickOnNextCycleP {
		render: "{@data-color}";
	}
}

#checkClickOnNextCycle:test {
	func: checkClickOnNextCycleA;
	focus-on: #clickOnNextCycleStart;
	click-on-next-cycle: #clickOnNextCycleDiv a;
	func: checkClickOnNextCycleB;
	focus-on-next-cycle: #clickOnNextCycleDiv a;
	click-on-next-cycle: #clickOnNextCycleDiv a;
	func: checkClickOnNextCycleC;
	focus-on-next-cycle: #clickOnNextCycleDiv a;
	click-on-next-cycle: #clickOnNextCycleDiv a;
	func: checkClickOnNextCycleFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkClickOnNext\" data-desc=\"Basic click-on-next command\" class=\"coreTest\">{|checkClickOnNextHTML}</div>";
}

@component checkClickOnNextHTML {
	html {
		<div id="clickOnNextDiv">
		    <a data-color="green" href="">Apples</a>
		    <a data-color="orange" href="">Oranges</a>
		    <a id="clickOnNextStart" data-color="white" href="">Lychee</a>
		    <a data-color="yellow" href="">Bananas</a>
		    <a data-color="purple and green" href="">Grapes</a>
		</div>
		<p id="clickOnNextP"></p>
	}
}

#clickOnNextDiv a:click {
	#clickOnNextP {
		render: "{@data-color}";
	}
}

#checkClickOnNext:test {
	func: checkClickOnNextA;
	focus-on: #clickOnNextStart;
	click-on-next: #clickOnNextDiv a;
	func: checkClickOnNextB;
	focus-on-next: #clickOnNextDiv a;
	click-on-next: #clickOnNextDiv a;
	func: checkClickOnNextC;
	focus-on-next: #clickOnNextDiv a;
	click-on-next: #clickOnNextDiv a;
	func: checkClickOnNextFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkClickOnPreviousCycle\" data-desc=\"Basic click-on-previous-cycle command\" class=\"coreTest\">{|checkClickOnPreviousCycleHTML}</div>";
}

@component checkClickOnPreviousCycleHTML {
	html {
		<div id="clickOnPreviousCycleDiv">
		    <a data-color="green" href="">Apples</a>
		    <a data-color="orange" href="">Oranges</a>
		    <a id="clickOnPreviousCycleStart" data-color="white" href="">Lychee</a>
		    <a data-color="yellow" href="">Bananas</a>
		    <a data-color="purple and green" href="">Grapes</a>
		</div>
		<p id="clickOnPreviousCycleP"></p>
	}
}

#clickOnPreviousCycleDiv a:click {
	#clickOnPreviousCycleP {
		render: "{@data-color}";
	}
}

#checkClickOnPreviousCycle:test {
	func: checkClickOnPreviousCycleA;
	focus-on: #clickOnPreviousCycleStart;
	click-on-previous-cycle: #clickOnPreviousCycleDiv a;
	func: checkClickOnPreviousCycleB;
	focus-on-previous-cycle: #clickOnPreviousCycleDiv a;
	click-on-previous-cycle: #clickOnPreviousCycleDiv a;
	func: checkClickOnPreviousCycleC;
	focus-on-previous-cycle: #clickOnPreviousCycleDiv a;
	click-on-previous-cycle: #clickOnPreviousCycleDiv a;
	func: checkClickOnPreviousCycleFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkClickOnPrevious\" data-desc=\"Basic click-on-previous command\" class=\"coreTest\">{|checkClickOnPreviousHTML}</div>";
}

@component checkClickOnPreviousHTML {
	html {
		<div id="clickOnPreviousDiv">
		    <a data-color="green" href="">Apples</a>
		    <a data-color="orange" href="">Oranges</a>
		    <a id="clickOnPreviousStart" data-color="white" href="">Lychee</a>
		    <a data-color="yellow" href="">Bananas</a>
		    <a data-color="purple and green" href="">Grapes</a>
		</div>
		<p id="clickOnPreviousP"></p>
	}
}

#clickOnPreviousDiv a:click {
	#clickOnPreviousP {
		render: "{@data-color}";
	}
}

#checkClickOnPrevious:test {
	func: checkClickOnPreviousA;
	focus-on: #clickOnPreviousStart;
	click-on-previous: #clickOnPreviousDiv a;
	func: checkClickOnPreviousB;
	focus-on-previous: #clickOnPreviousDiv a;
	click-on-previous: #clickOnPreviousDiv a;
	func: checkClickOnPreviousC;
	focus-on-previous: #clickOnPreviousDiv a;
	click-on-previous: #clickOnPreviousDiv a;
	func: checkClickOnPreviousFinal;
}

/* Pended until clone/restore-clone issue 36 has been resolved.

#content:draw {
	render-before-end: "<div id=\"checkClone\" data-desc=\"Basic clone command\" class=\"coreTest\">{|checkCloneHTML}</div>";
}

@component checkCloneHTML {
	html {
		<p class="cloneText"><span>This text is going to be cloned</span></p>
		<div id="restoreCloneInHere"><div id="restoreHere"></div></div>
	}
}

#checkClone:test {
	func: checkCloneBefore;
	clone: .cloneText;
	#restoreHere {
		restore-clone: .cloneText;
	}
	func: checkClone;
}
*/
/*	This is a valid test, but Chrome headless does not support the copy event. If it ever does then this can be re-implemented. Just uncomment.

#content:draw {
	render-before-end: "<div id=\"checkCopyToClipboard\" data-desc=\"Basic copy-to-clipboard command\" class=\"coreTest\">{|checkCopyToClipboardHTML}</div>";
	func: checkCopyToClipboard;
}

@component checkCopyToClipboardHTML {
	html {
		<input id="copyToClipboardFrom" name="copyToClipboardFrom" value="some text">
	}
}

#checkCopyToClipboard:test {
	copy-to-clipboard: #copyToClipboardFrom after {window.delayTimes.copyToClipboard[0]}ms;
}

#copyToClipboardFrom:copy {
	*//* If this event is called, then we have to assume it works as we can't read the clipboard. This function marks the test as passed. *//*
	console-log: "something was just copied.";
	func: checkCopyToClipboard;
}
*/
#content:draw {
	render-before-end: "<div id=\"checkEval\" data-desc=\"Basic eval command\" class=\"coreTest\"></div>";
}

#checkEval:test {
	eval: {= window.evalResult = 1 + 1; =};
	func: checkEval;
}

#content:draw {
	render-before-end: "<div id=\"checkFocusOff\" data-desc=\"Basic focus-off command\" class=\"coreTest\">{|checkFocusOffHTML}</div>";
}

@component checkFocusOffHTML {
	html {
		<input id="focusOffField" type="text" value="This text field will get focus after one second, and then will blur - or focus-off - two seconds after that.">
	}
}

#checkFocusOff:test {
	#focusOffField {
	    focus-on: self;
	    func: checkFocusOffA;
	    focus-off: true;
	}
	func: checkFocusOffFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkFocusOnFirst\" data-desc=\"Basic focus-on-first command\" class=\"coreTest\">{|checkFocusOnFirstHTML}</div>";
}

@component checkFocusOnFirstHTML {
	html {
		<form id="focusOnFirstForm">
		    <input id="focusOnFirstTarget" type="text" name="focus1" value="Cheryl">
		    <input type="text" name="focus2" value="Dave">
		    <input type="text" name="focus3" value="Bob">
		    <input type="text" name="focus4" value="Tracy">
		    <input type="text" name="focus4" value="Sharon">
		</form>
	}
}

#checkFocusOnFirst:test {
	func: checkFocusOnFirstA;
	focus-on-first: #focusOnFirstForm input;
	func: checkFocusOnFirstFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkFocusOnLast\" data-desc=\"Basic focus-on-last command\" class=\"coreTest\">{|checkFocusOnLastHTML}</div>";
}

@component checkFocusOnLastHTML {
	html {
		<form id="focusOnLastForm">
		    <input type="text" name="focus1" value="Cheryl">
		    <input type="text" name="focus2" value="Dave">
		    <input type="text" name="focus3" value="Bob">
		    <input type="text" name="focus4" value="Tracy">
		    <input id="focusOnLastTarget" type="text" name="focus4" value="Sharon">
		</form>
	}
}

#checkFocusOnLast:test {
	func: checkFocusOnLastA;
	focus-on-last: #focusOnLastForm input;
	func: checkFocusOnLastFinal;
}


#content:draw {
	render-before-end: "<div id=\"checkFocusOnNextCycle\" data-desc=\"Basic focus-on-next-cycle command\" class=\"coreTest\">{|checkFocusOnNextCycleHTML}</div>";
}

@component checkFocusOnNextCycleHTML {
	html {
		<div class="focusOnNextCycleBlock">
		    <a id="focusOnNextCycleEnd" href="">Apples</a>
		    <a href="">Oranges</a>
		    <a href="">Pears</a>
		    <a id="focusOnNextCycleStart" href="">Bananas</a>
		    <a id="focusOnNextCycleSecond" href="">Grapes</a>
		</div>
	}
}

#checkFocusOnNextCycle:test {
	func: checkFocusOnNextCycleA;
	focus-on: #focusOnNextCycleStart;
	func: checkFocusOnNextCycleB;
	focus-on-next-cycle: .focusOnNextCycleBlock a;
	func: checkFocusOnNextCycleC;
 	focus-on-next-cycle: .focusOnNextCycleBlock a;
	func: checkFocusOnNextCycleFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkFocusOnNext\" data-desc=\"Basic focus-on-next command\" class=\"coreTest\">{|checkFocusOnNextHTML}</div>";
}

@component checkFocusOnNextHTML {
	html {
		<div class="focusOnNextBlock">
		    <a href="">Apples</a>
		    <a href="">Oranges</a>
		    <a id="focusOnNextStart" href="">Pears</a>
		    <a id="focusOnNextSecond" href="">Bananas</a>
		    <a id="focusOnNextEnd" href="">Grapes</a>
		</div>
	}
}

#checkFocusOnNext:test {
	func: checkFocusOnNextA;
    focus-on: #focusOnNextStart;
	func: checkFocusOnNextB;
	focus-on-next: .focusOnNextBlock a;
	func: checkFocusOnNextC;
	focus-on-next: .focusOnNextBlock a;
	func: checkFocusOnNextD;
	focus-on-next: .focusOnNextBlock a;
	func: checkFocusOnNextFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkFocusOnPreviousCycle\" data-desc=\"Basic focus-on-previous-cycle command\" class=\"coreTest\">{|checkFocusOnPreviousCycleHTML}</div>";
}

@component checkFocusOnPreviousCycleHTML {
	html {
		<div class="focusOnPreviousCycleBlock">
		    <a id="focusOnPreviousCycleSecond" href="">Apples</a>
		    <a id="focusOnPreviousCycleStart" href="">Oranges</a>
		    <a href="">Pears</a>
		    <a href="">Bananas</a>
		    <a id="focusOnPreviousCycleEnd" href="">Grapes</a>
		</div>
	}
}

#checkFocusOnPreviousCycle:test {
	func: checkFocusOnPreviousCycleA;
    focus-on: #focusOnPreviousCycleStart;
	func: checkFocusOnPreviousCycleB;
	focus-on-previous-cycle: .focusOnPreviousCycleBlock a;
	func: checkFocusOnPreviousCycleC;
	focus-on-previous-cycle: .focusOnPreviousCycleBlock a;
	func: checkFocusOnPreviousCycleFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkFocusOnPrevious\" data-desc=\"Basic focus-on-previous command\" class=\"coreTest\">{|checkFocusOnPreviousHTML}</div>";
}

@component checkFocusOnPreviousHTML {
	html {
		<div class="focusOnPreviousBlock">
		    <a id="focusOnPreviousEnd" href="">Apples</a>
		    <a id="focusOnPreviousSecond" href="">Oranges</a>
		    <a id="focusOnPreviousStart" href="">Pears</a>
		    <a href="">Bananas</a>
		    <a href="">Grapes</a>
		</div>
	}
}

#checkFocusOnPrevious:test {
	func: checkFocusOnPreviousA;
	focus-on: #focusOnPreviousStart;
	func: checkFocusOnPreviousB;
	focus-on-previous: .focusOnPreviousBlock a;
	func: checkFocusOnPreviousC;
	focus-on-previous: .focusOnPreviousBlock a;
	func: checkFocusOnPreviousD;
	focus-on-previous: .focusOnPreviousBlock a;
	func: checkFocusOnPreviousFinal;
}

/* This is tested in the blur command test and will specifically error if it doesn't work. */

#content:draw {
	render-before-end: "<div id=\"checkFunc\" data-desc=\"Basic func command\" class=\"coreTest\"></div>";
}

#checkFunc:test {
	var: window.acSSGlobIt "some data";
	var: myACSSVariable {myObj: true, myArray: [1, 2, 3, 4]};
	func: checkFuncNum 8;
	func: checkFuncStr "test string";
	func: checkFuncTrue true;
	func: checkFuncFalse false;
/*	
	Still to set up:
	func: checkFuncArr [1, 2, "cheesey wotsit"];
	func: checkFuncObj {dave: "hi"};
	func: checkFuncWinVar window.globIt;
	func: checkFuncACSSVar {myACSSVariable};
	func: checkFuncExpr {= 7 + 10 =};
	func: checkFuncCombined [1, 2, "cheesey wotsit"] {dave: "hi"} window.globIt {myACSSVariable} {= new Date =};*/

	func: checkFuncFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkRemoveAttribute\" data-desc=\"Basic remove-attribute command\" class=\"coreTest\">{|checkRemoveAttributeHTML}</div>";
}

@component checkRemoveAttributeHTML {
	html {
		<div id="removeAttributeDiv" data-test="some data"></div>
	}
}

#checkRemoveAttribute:test {
	#removeAttributeDiv {
		remove-attribute: data-test;
	}
	func: checkRemoveAttribute;
}

#content:draw {
	render-before-end: "<div id=\"checkRemoveClass\" data-desc=\"Basic remove-class command\" class=\"coreTest removeClassToRemove\"></div>";
}

#checkRemoveClass:test {
	remove-class: .removeClassToRemove;
	func: checkRemoveClass;
}

/* Pended until clone/restore-clone issue 36 has been resolved.
#content:draw {
	render-before-end: "<div id=\"checkRemoveClone\" data-desc=\"Basic remove-clone command\" class=\"coreTest\">{|checkRemoveCloneHTML}</div>";
}

@component checkRemoveCloneHTML {
	html {
	}
}

#checkRemoveClone:test {
	func: checkRemoveClone;
}
*/
#content:draw {
	render-before-end: "<div id=\"checkRemoveCookie\" data-desc=\"Basic remove-cookie command\" class=\"coreTest\"></div>";
}

#checkRemoveCookie:test {
	set-cookie: name("removeCookieTest1") value("Y") expires("1 Year") path("/") sameSite("Strict") secureIfHttps;
	func: checkRemoveCookieA;
	remove-cookie: name("removeCookieTest1") path("/");
	func: checkRemoveCookieFinal;
}

#content:draw {
	render-before-end: "<div id=\"checkRemoveProperty\" data-desc=\"Basic remove-property command\" class=\"coreTest\">{|checkRemovePropertyHTML}</div>";
}

@component checkRemovePropertyHTML {
	html {
		<div id="removePropertyDiv" style="background-color: green;"></div>
	}
}

#checkRemoveProperty:test {
	#removePropertyDiv {
		func: checkRemovePropertyBefore;
		remove-property: background-color;
	}
	func: checkRemoveProperty;
}

#content:draw {
	render-before-end: "<div id=\"checkRemove\" data-desc=\"Basic remove command\" class=\"coreTest\">{|checkRemoveHTML}</div>";
}

@component checkRemoveHTML {
	html {
		<div id="removeToRemove"></div>
	}
}

#checkRemove:test {
	func: checkRemoveBefore;
	remove: #removeToRemove;
	func: checkRemove;
}

/* This test is covered by the clone command test, as they work together. */
#content:draw {
	render-before-end: "<div id=\"checkRun\" data-desc=\"Basic run command\" class=\"coreTest\"></div>";
}

#checkRun:test {
	run: {= window.runResult = 1 + 1; =};
	func: checkRun;
}

#content:draw {
	render-before-end: "<div id=\"checkSetAttribute\" data-desc=\"Basic set-attribute command\" class=\"coreTest\">{|checkSetAttributeHTML}</div>";
}

@component checkSetAttributeHTML {
	html {
		<div id="setAttributeDiv"></div>
	}
}

#checkSetAttribute:test {
	#setAttributeDiv {
		set-attribute: data-test "some data";
	}
	func: checkSetAttribute;
}

#content:draw {
	render-before-end: "<div id=\"checkSetClass\" data-desc=\"Basic set-class command\" class=\"coreTest\">{|checkSetClassHTML}</div>";
}

@component checkSetClassHTML {
	html {
		<div id="setClassBox" class="some randomClasses in here"></div>
	}
}

#checkSetClass:test {
	#setClassBox {
		set-class: "classes with .quotes";
		func: checkSetClassA;
		set-class: .someclasses .without .thequotes;
		func: checkSetClassB;
		set-class: moreclasses with no dots;
		func: checkSetClassFinal;
	}
}

#content:draw {
	render-before-end: "<div id=\"checkSetCookie\" data-desc=\"Basic set-cookie command\" class=\"coreTest\"></div>";
}

#checkSetCookie:test {
	set-cookie: name("test1") value("Y") expires("1 Year") path("/") sameSite("Strict") secureIfHttps;
	set-cookie: name("test2") value("some info\"'") expires("3 months") path("/") sameSite("Strict") secureIfHttps;
	set-cookie: name("test3") value("fred") expires("-1 hour") path("/") sameSite("Strict") secureIfHttps;
	set-cookie: name("test4") value("expired cookie") expires("Fri, 16 Oct 2020 09:01:01 GMT") path("/") sameSite("Strict") secureIfHttps;
	set-cookie: name("test5") value("non-expired cookie") expires("Fri, 31 Dec 9999 09:01:01 GMT") path("/") sameSite("Strict") secureIfHttps;
	set-cookie: name("test6") value("expression expired") expires("{= new Date(new Date().setFullYear(new Date().getFullYear() - 1)).toUTCString() =}") path("/") sameSite("Strict") secureIfHttps;
	set-cookie: name("test7") value("expression not expired") expires("{= new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toUTCString() =}") path("/") sameSite("Strict") secureIfHttps;
	func: checkSetCookie;
}

#content:draw {
	render-before-end: "<div id=\"checkSetProperty\" data-desc=\"Basic set-property command\" class=\"coreTest\">{|checkSetPropertyHTML}</div>";
}

@component checkSetPropertyHTML {
	html {
		<input id="setPropertyInput" name="setPropertyInput" disabled></div>
	}
}

#checkSetProperty:test {
	#setPropertyInput {
		func: checkSetPropertyBefore;
		set-property: disabled false;
	}
	func: checkSetProperty;
}

#content:draw {
	render-before-end: "<div id=\"checkStyle\" data-desc=\"Basic style command\" class=\"coreTest\"></div>";
}

#checkStyle:test {
	style: background-color green;
	func: checkStyle;
}

#content:draw {
	render-before-end: "<div id=\"checkTakeClass\" data-desc=\"Basic take-class command\" class=\"coreTest\">{|checkTakeClassHTML}</div>";
}

@component checkTakeClassHTML {
	html {
		<p>Click on a fruit to select it.</p>

		<div id="takeClassApple" class="takeClassFruit">Apple</div>
		<div id="takeClassOrange" class="takeClassFruit">Orange</div>
		<div id="takeClassLemon" class="takeClassFruit taken">Lemon</div>
		<div id="takeClassLime" class="takeClassFruit">Lime</div>
	}
}

#checkTakeClass:test {
	#takeClassOrange {
		take-class: .taken;
		func: checkTakeClassA;
	}
	#takeClassLime {
		take-class: .taken;
		func: checkTakeClassFinal;
	}
}

#content:draw {
	render-before-end: "<div id=\"checkToggleClass\" data-desc=\"Basic toggle-class command\" class=\"coreTest\">{|checkToggleClassHTML}</div>";
}

@component checkToggleClassHTML {
	html {
		<div id="toggleClassBox" class="exampleSquare"></div>
	}
}

#checkToggleClass:test {
	#toggleClassBox {
        toggle-class: .butNotReally;
		func: checkToggleClassA;
        toggle-class: .butNotReally;
		func: checkToggleClassFinal;
    }
}

#content:draw {
	render-before-end: "<div id=\"checkUrlChange\" data-desc=\"Basic url-change command\" class=\"coreTest\"></div>";
}

#checkUrlChange:test {
	url-change: "/test/funky/url" "Funky test URL";
	func: checkUrlChange;
}
